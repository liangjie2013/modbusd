{
  "name": "Modbusd",
  "tagline": "Modbus master daemon based on libmodbus",
  "body": "# modbusd\r\n\r\n[![Docker](https://img.shields.io/badge/docker-ready-brightgreen.svg)](https://hub.docker.com/r/edgepro/modbusd)\r\n[![API](https://img.shields.io/badge/code-documented-brightgreen.svg)](http://taka-wang.github.io/modbusd/api)\r\n\r\nModbus master daemon\r\n\r\n- Support doxygen style comments.\r\n- ZeroMQ is a high-level message library, you can replace it with your own data bus implementations without losing the core functionalities.\r\n\r\n## Table of content\r\n\r\n- [Continuous Integration](#ci)\r\n- [Design](#design)\r\n- [Setup](#setup)\r\n- [Documentation](#doc)\r\n\r\n---\r\n\r\n<a name=\"ci\"></a>\r\n\r\n## Continuous Integration\r\n\r\nI do continuous integration and build docker images after git push by self-hosted [drone.io](http://armdrone.cmwang.net) server for armhf platform , [circleci](http://circleci.com) server for x86 platform and [dockerhub](https://hub.docker.com/r/edgepro/modbusd) service.\r\n\r\n| CI Server| Target    | Status                                                                                                                                                                     |\r\n|----------|-----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| Travis   | API       | [![Build Status](https://travis-ci.org/taka-wang/modbusd.svg?branch=dev)](https://travis-ci.org/taka-wang/modbusd)                                                         |\r\n| CircleCI | x86       | [![CircleCI](https://circleci.com/gh/taka-wang/modbusd.svg?style=shield&circle-token=b72c7cf9e37bdba1fc236c73f400ed5783e99539)](https://circleci.com/gh/taka-wang/modbusd) |\r\n| Drone    | armhf     | [![Build Status](http://armdrone.cmwang.net/api/badges/taka-wang/modbusd/status.svg)](http://armdrone.cmwang.net/taka-wang/modbusd)                                                  |\r\n\r\n\r\n<a name=\"design\"></a>\r\n\r\n\r\n## Design\r\n\r\n### Implemented libmodbus function codes\r\n\r\n>| FC    | Description            | #Len    | API                                                                                                                                                 |\r\n>|:-----:|------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------|\r\n>| 0x01  | read coils             |  2000   |[int modbus_read_bits(modbus_t *ctx, int addr, int nb, uint8_t *dest)](http://libmodbus.org/docs/v3.1.4/modbus_read_bits.html)                       |\r\n>| 0x02  | read discrete inputs   |  2000   |[int modbus_read_input_bits(modbus_t *ctx, int addr, int nb, uint8_t *dest)](http://libmodbus.org/docs/v3.1.4/modbus_read_input_bits.html)           |\r\n>| 0x03  | read holding registers |  125    |[int modbus_read_registers(modbus_t *ctx, int addr, int nb, uint16_t *dest)](http://libmodbus.org/docs/v3.1.4/modbus_read_registers.html)            |\r\n>| 0x04  | read input registers   |  125    |[int modbus_read_input_registers(modbus_t *ctx, int addr, int nb, uint16_t *dest)](http://libmodbus.org/docs/v3.1.4/modbus_read_input_registers.html)|\r\n>| 0x05  | write single coil      |   -     |[int modbus_write_bit(modbus_t *ctx, int addr, int status)](http://libmodbus.org/docs/v3.1.4/modbus_write_bit.html)                                  |\r\n>| 0x06  | write single register  |   -     |[int modbus_write_register(modbus_t *ctx, int addr, int value)](http://libmodbus.org/docs/v3.1.4/modbus_write_register.html)                         |\r\n>| 0x0F  | write multi coils      |  1968   |[int modbus_write_bits(modbus_t *ctx, int addr, int nb, const uint8_t *src)](http://libmodbus.org/docs/v3.1.4/modbus_write_bits.html)                |\r\n>| 0x10  | write multi registers  |  125    |[int modbus_write_registers(modbus_t *ctx, int addr, int nb, const uint16_t *src)](http://libmodbus.org/docs/v3.1.4/modbus_write_registers.html)     |\r\n\r\n### Coil/register number and address table\r\n\r\n>|Coil/Register numbers|data address       |type          |table name                     |offset| function code|\r\n>|:--------------------|:------------------|:-------------|:------------------------------|:-----|:-------------|\r\n>|1-9999               |0000 to 270E (9998)|Read-Write    |Discrete Output Coils          |1     | 1, 5, 15     |\r\n>|10001-19999          |0000 to 270E (9998)|Read-Only     |Discrete Input Contacts        |10001 | 2            |\r\n>|30001-39999          |0000 to 270E (9998)|Read-Only     |Analog Input Registers         |30001 | 4            |\r\n>|40001-49999          |0000 to 270E (9998)|Read-Write    |Analog Output Holding Registers|40001 | 3, 6, 16     |\r\n\r\n### Command mapping table\r\n\r\n>| Command         | Number | Description      |\r\n>|:---------------:|-------:|:-----------------|\r\n>| fc1             |   1    | modbus fc 1      |\r\n>| fc2             |   2    | modbus fc 2      |\r\n>| fc3             |   3    | modbus fc 3      |\r\n>| fc4             |   4    | modbus fc 4      |\r\n>| fc5             |   5    | modbus fc 5      |\r\n>| fc6             |   6    | modbus fc 6      |\r\n>| fc15            |  15    | modbus fc 15     |\r\n>| fc16            |  16    | modbus fc 16     |\r\n>| set_tcp_timeout |  50    | set tcp timeout  |\r\n>| get_tcp_timeout |  51    | get tcp timeout  |\r\n\r\n\r\n---\r\n\r\n### Configuration File\r\n\r\n```javascript\r\n{\r\n    \"syslog\": 1,\r\n    \"zmq\":\r\n    {\r\n        \"sub\": \"ipc:///tmp/to.modbus\",\r\n        \"pub\": \"ipc:///tmp/from.modbus\"\r\n    },\r\n    \"mbtcp\":\r\n    {\r\n        \"connect_timeout\": 200000\r\n    }\r\n}\r\n```\r\n\r\n### Modbus TCP command format\r\n\r\nPlease refer to [command definition](docs/command.md).\r\n\r\n### External libraries\r\n\r\n- [libmodbus](http://libmodbus.org)\r\n- [libzmq](https://github.com/zeromq/libzmq)\r\n- [czmq](https://github.com/zeromq/czmq)\r\n- [uthash](https://troydhanson.github.io/uthash)\r\n- [cJSON](https://github.com/DaveGamble/cJSON)\r\n\r\n---\r\n\r\n### Library documentations\r\n\r\n- [uthash user guide](http://troydhanson.github.io/uthash/userguide.html)\r\n- [libmodbus api document](http://libmodbus.org/docs/v3.1.4/)\r\n- [libmodbus header](https://github.com/stephane/libmodbus/blob/master/src/modbus.h)\r\n- [cJSON examples](https://github.com/DaveGamble/cJSON)\r\n\r\n\r\n### Flow Chart\r\n\r\n![flow](image/flow.png)\r\n\r\n---\r\n\r\n<a name=\"setup\"></a>\r\n\r\n## Setup\r\n\r\n### Setup development dependencies\r\n\r\n```bash\r\nsudo apt-get update\r\nsudo apt-get install -y git build-essential autoconf libtool pkg-config cmake\r\n```\r\n\r\n---\r\n\r\n### Setup OSS libs dependencies\r\n\r\n#### Install libmodbus library (3.1.4)\r\n\r\n```bash\r\ngit clone https://github.com/stephane/libmodbus/\r\ncd libmodbus\r\n./autogen.sh\r\n./configure\r\nmake\r\nsudo make install\r\nsudo ldconfig\r\n```\r\n\r\n#### Install libzmq (3.2.5)\r\n\r\n```bash\r\nwget https://github.com/zeromq/zeromq3-x/releases/download/v3.2.5/zeromq-3.2.5.tar.gz\r\ntar xvzf zeromq-3.2.5.tar.gz\r\ncd zeromq-3.2.5\r\n./configure\r\nmake\r\nsudo make install\r\nsudo ldconfig\r\n```\r\n\r\n#### Install czmq (high-level C binding for zeromq)\r\n\r\n```bash\r\ngit clone git://github.com/zeromq/czmq.git\r\ncd czmq\r\n./autogen.sh\r\n./configure\r\nmake\r\nsudo make install\r\nsudo ldconfig\r\n```\r\n\r\n### Build from source code\r\n\r\n```bash\r\ngit clone modbusd\r\ncd modbusd\r\nmkdir build\r\ncd build\r\ncmake ..\r\nmake\r\n./modbusd ../modbusd.json # load external configuration file\r\n```\r\n\r\n---\r\n\r\n## Test Cases\r\n\r\n- [x] Test holding registers (4x)\r\n    - [x] `4X Table: 60000` Read/Write uint16 value test: FC6, FC3\r\n    - [x] `4X Table: 30000` Read/Write int16 value test: FC6, FC3\r\n    - [x] `4X Table` Multiple read/write test: FC16, FC3\r\n    - [x] `4X Table` Multiple read/write test: FC16, FC3\r\n- [x] Test coils (0x)\r\n    - [x] `0X Table` Single read/write test:FC5, FC1\r\n    - [x] `0X Table` Multiple read/write test: FC15, FC1\r\n- [x] Test Discrete Input (1x)\r\n    - [x] `1X Table` read test: FC2\r\n- [x] Test Input Registers (3x)\r\n    - [x] `3X Table` read test:FC4\r\n- [x] Test TCP Timeout\r\n    - [x] `Set timeout` test\r\n    - [x] `Get timeout` test\r\n\r\n![ci](image/ci-drone.png)\r\n\r\n### Images and testing from the scratch\r\n\r\n```bash\r\n\r\ndocker pull edgepro/c-modbus-slave:x86\r\ndocker build -t edgepro/modbusd .\r\ndocker build -t edgepro/dummy-psmbtcp test/dummy-psmbtcp/.\r\n\r\ndocker run -itd --name=slave edgepro/c-modbus-slave:x86\r\ndocker run -v /tmp:/tmp --link slave -it --name=modbusd edgepro/modbusd\r\ndocker run -v /tmp:/tmp -it --link slave edgepro/dummy-psmbtcp\r\n```\r\n\r\n### Docker compose\r\n\r\n```bash\r\ndocker-compose up --abort-on-container-exit\r\n```\r\n\r\n### Deployment Diagram\r\n\r\n![uml](http://uml.cmwang.net:8000/plantuml/svg/5Sl13O0W343HLNG0wTrjAcs0I2c1DiRjnVD_VoyjLYVsKRTirkS9CF09gLZsooUFgCsuMOWgO7ZZyM1Bq5qg24xZ0SIzwYiBWIYjYSAVFm00)\r\n\r\n---\r\n\r\n<a name=\"doc\"></a>\r\n\r\n## Documentations\r\n\r\n- [API Documentation](http://taka-wang.github.io/modbusd/api)\r\n\r\n---\r\n\r\n## License\r\n\r\nMIT\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}